
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EMMAttachComplete {
    #[deku(ctx = "NeedsByteSize")] pub esm_container: Type6LVE<Layer3Buffer>,
}


#[cfg(test)]
mod tests {
    use super::*;
    use crate::nas::test_utils::*;
    use deku::prelude::*;
    use std::io::Cursor;

    #[test]
    fn test_case_1() {
        let mut bytes = Cursor::new(unhexlify("00035200c2"));
        let mut reader = Reader::new(&mut bytes);
        let msg = EMMAttachComplete::from_reader_with_ctx(&mut reader, ())
            .expect("failed to parse");
        let esm_container = msg.esm_container.inner;
        assert_eq!(esm_container, vec![82, 0, 194]);
    }

    #[test]
    fn test_case_2() {
        let mut bytes = Cursor::new(unhexlify("00035200c2000000000000"));
        let mut reader = Reader::new(&mut bytes);
        let msg = EMMAttachComplete::from_reader_with_ctx(&mut reader, ())
            .expect("failed to parse");
        let esm_container = msg.esm_container.inner;
        assert_eq!(esm_container, vec![82, 0, 194]);
    }
}

