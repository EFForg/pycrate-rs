
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EMMAttachReject {
    #[deku(bytes = 1)] pub emm_cause: Type3V<EMMCauseEMMCause>,
    #[deku(ctx = "Tag(120), NeedsByteSize")] pub esm_container: Type6TLVE<Layer3Buffer>,
    #[deku(ctx = "Tag(95)")] pub t_3346: Type4TLV<GPRSTimer>,
    #[deku(ctx = "Tag(22)")] pub t_3402: Type4TLV<GPRSTimer>,
    #[deku(ctx = "Tag(10)")] pub ext_emm_cause: Type1TV<ExtEMMCause>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct GPRSTimer {
    pub unit: GPRSTimerUnit,
    #[deku(bits = 5)] pub value: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ExtEMMCause {
    #[deku(bits = 2)] pub spare: u8,
    #[deku(bits = 1)] pub eps_optim_info: u8,
    #[deku(bits = 1)] pub eutran_allowed: u8,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum EMMCauseEMMCause {
    #[deku(id_pat = "2")] IMSIUnknownInHSS,
    #[deku(id_pat = "3")] IllegalUE,
    #[deku(id_pat = "5")] IMEINotAccepted,
    #[deku(id_pat = "6")] IllegalME,
    #[deku(id_pat = "7")] EPSServicesNotAllowed,
    #[deku(id_pat = "8")] EPSServicesAndNonEPSServicesNotAllowed,
    #[deku(id_pat = "9")] UEIdentityCannotBeDerivedByTheNetwork,
    #[deku(id_pat = "10")] ImplicitlyDetached,
    #[deku(id_pat = "11")] PLMNNotAllowed,
    #[deku(id_pat = "12")] TrackingAreaNotAllowed,
    #[deku(id_pat = "13")] RoamingNotAllowedInThisTrackingArea,
    #[deku(id_pat = "14")] EPSServicesNotAllowedInThisPLMN,
    #[deku(id_pat = "15")] NoSuitableCellsInTrackingArea,
    #[deku(id_pat = "16")] MSCTemporarilyNotReachable,
    #[deku(id_pat = "17")] NetworkFailure,
    #[deku(id_pat = "18")] CSDomainNotAvailable,
    #[deku(id_pat = "19")] ESMFailure,
    #[deku(id_pat = "20")] MACFailure,
    #[deku(id_pat = "21")] SynchFailure,
    #[deku(id_pat = "22")] Congestion,
    #[deku(id_pat = "23")] UESecurityCapabilitiesMismatch,
    #[deku(id_pat = "24")] SecurityModeRejectedUnspecified,
    #[deku(id_pat = "25")] NotAuthorizedForThisCSG,
    #[deku(id_pat = "26")] NonEPSAuthenticationUnacceptable,
    #[deku(id_pat = "35")] RequestedServiceOptionNotAuthorizedInThisPLMN,
    #[deku(id_pat = "39")] CSServiceTemporarilyNotAvailable,
    #[deku(id_pat = "40")] NoEPSBearerContextActivated,
    #[deku(id_pat = "42")] SevereNetworkFailure,
    #[deku(id_pat = "95")] SemanticallyIncorrectMessage,
    #[deku(id_pat = "96")] InvalidMandatoryInformation,
    #[deku(id_pat = "97")] MessageTypeNonExistentOrNotImplemented,
    #[deku(id_pat = "98")] MessageTypeNotCompatibleWithTheProtocolState,
    #[deku(id_pat = "99")] InformationElementNonExistentOrNotImplemented,
    #[deku(id_pat = "100")] ConditionalIEError,
    #[deku(id_pat = "101")] MessageNotCompatibleWithTheProtocolState,
    #[deku(id_pat = "111")] ProtocolErrorUnspecified,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum GPRSTimerUnit {
    #[deku(id_pat = "0")] TwoSec,
    #[deku(id_pat = "1")] OneMin,
    #[deku(id_pat = "2")] SixMin,
    #[deku(id_pat = "7")] TimerDeactivated,
    #[deku(id_pat = "_")] Other,
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::nas::test_utils::*;
    use deku::prelude::*;
    use std::io::Cursor;

    #[test]
    fn test_case_1() {
        let mut bytes = Cursor::new(unhexlify("137800040201d121"));
        let mut reader = Reader::new(&mut bytes);
        let msg = EMMAttachReject::from_reader_with_ctx(&mut reader, ())
            .expect("failed to parse");
        let emm_cause = msg.emm_cause.inner;
        assert_eq!(emm_cause, EMMCauseEMMCause::ESMFailure);
        let esm_container = msg.esm_container.inner.unwrap();
        assert_eq!(esm_container, vec![2, 1, 209, 33]);
    }
}

