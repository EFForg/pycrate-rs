
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EMMExtServiceRequest {
    pub nas_ksi: Type1V<NASKSI>,
    pub service_type: Type1V<ServiceTypeV>,
    pub mtmsi: Type4LV<ID>,
    #[deku(ctx = "Tag(11)")] pub csfb_response: Type1TV<CSFBResponse>,
    #[deku(ctx = "Tag(87)")] pub eps_bearer_ctxt_stat: Type4TLV<EPSBearerCtxtStat>,
    #[deku(ctx = "Tag(13)")] pub device_prop: Type1TV<DeviceProp>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct NASKSI {
    pub tsc: NASKSITSC,
    pub value: NASKSIValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ID {

}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct CSFBResponse {
    #[deku(bits = 1)] pub spare: u8,
    pub value: CSFBResponseValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EPSBearerCtxtStat {
    pub ebi_7: EPSBearerCtxtStatEBI7,
    pub ebi_6: EPSBearerCtxtStatEBI6,
    pub ebi_5: EPSBearerCtxtStatEBI5,
    #[deku(bits = 1)] pub ebi_4: u8,
    #[deku(bits = 1)] pub ebi_3: u8,
    #[deku(bits = 1)] pub ebi_2: u8,
    #[deku(bits = 1)] pub ebi_1: u8,
    #[deku(bits = 1)] pub ebi_0: u8,
    pub ebi_15: EPSBearerCtxtStatEBI15,
    pub ebi_14: EPSBearerCtxtStatEBI14,
    pub ebi_13: EPSBearerCtxtStatEBI13,
    pub ebi_12: EPSBearerCtxtStatEBI12,
    pub ebi_11: EPSBearerCtxtStatEBI11,
    pub ebi_10: EPSBearerCtxtStatEBI10,
    pub ebi_9: EPSBearerCtxtStatEBI9,
    pub ebi_8: EPSBearerCtxtStatEBI8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct DeviceProp {
    #[deku(bits = 3)] pub spare: u8,
    #[deku(bits = 1)] pub low_priority: u8,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum ServiceTypeV {
    #[deku(id_pat = "0")] MobileOriginatingCSFallbackOr1XCSFallback,
    #[deku(id_pat = "1")] MobileTerminatingCSFallbackOr1XCSFallback,
    #[deku(id_pat = "2")] MobileOriginatingCSFallbackEmergencyCallOr1XCSFallbackEmergencyCall,
    #[deku(id_pat = "3 | 4")] UnusedShallBeInterpretedAsMobileOriginatingCSFallbackOr1XCSFallbackIfReceivedByTheNetwork,
    #[deku(id_pat = "8")] PacketServicesViaS1,
    #[deku(id_pat = "9 | 10 | 11")] UnusedShallBeInterpretedAsPacketServicesViaS1IfReceivedByTheNetwork,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI7 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI6 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI5 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI15 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI14 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI13 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI12 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI11 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI10 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI9 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum EPSBearerCtxtStatEBI8 {
    #[deku(id_pat = "0")] BEARERCONTEXTINACTIVE,
    #[deku(id_pat = "1")] BEARERCONTEXTACTIVE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum CSFBResponseValue {
    #[deku(id_pat = "0")] CSFallbackRejectedByTheUE,
    #[deku(id_pat = "1")] CSFallbackAcceptedByTheUE,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum NASKSITSC {
    #[deku(id_pat = "0")] NativeSecurityContext,
    #[deku(id_pat = "1")] MappedSecurityContext,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum NASKSIValue {
    #[deku(id_pat = "7")] NoKeyAvailable,
    #[deku(id_pat = "_")] Other,
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::nas::test_utils::*;
    use deku::prelude::*;
    use std::io::Cursor;

    #[test]
    fn test_case_1() {
        let mut bytes = Cursor::new(unhexlify("6005f4c2e65e9a57022000"));
        let mut reader = Reader::new(&mut bytes);
        let msg = EMMExtServiceRequest::from_reader_with_ctx(&mut reader, ())
            .expect("failed to parse");
        let nas_ksi = msg.nas_ksi.inner;
        assert_eq!(nas_ksi.tsc, NASKSITSC::NativeSecurityContext);
        assert_eq!(nas_ksi.value, NASKSIValue::Other);
        let service_type = msg.service_type.inner;
        assert_eq!(service_type, ServiceTypeV::MobileOriginatingCSFallbackOr1XCSFallback);
        let eps_bearer_ctxt_stat = msg.eps_bearer_ctxt_stat.inner.unwrap();
        assert_eq!(eps_bearer_ctxt_stat.ebi_7, EPSBearerCtxtStatEBI7::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_6, EPSBearerCtxtStatEBI6::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_5, EPSBearerCtxtStatEBI5::BEARERCONTEXTACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_4, 0);
        assert_eq!(eps_bearer_ctxt_stat.ebi_3, 0);
        assert_eq!(eps_bearer_ctxt_stat.ebi_2, 0);
        assert_eq!(eps_bearer_ctxt_stat.ebi_1, 0);
        assert_eq!(eps_bearer_ctxt_stat.ebi_0, 0);
        assert_eq!(eps_bearer_ctxt_stat.ebi_15, EPSBearerCtxtStatEBI15::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_14, EPSBearerCtxtStatEBI14::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_13, EPSBearerCtxtStatEBI13::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_12, EPSBearerCtxtStatEBI12::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_11, EPSBearerCtxtStatEBI11::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_10, EPSBearerCtxtStatEBI10::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_9, EPSBearerCtxtStatEBI9::BEARERCONTEXTINACTIVE);
        assert_eq!(eps_bearer_ctxt_stat.ebi_8, EPSBearerCtxtStatEBI8::BEARERCONTEXTINACTIVE);
    }
}

