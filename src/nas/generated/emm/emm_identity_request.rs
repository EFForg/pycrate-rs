
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EMMIdentityRequest {
    #[deku(pad_bits_before = "4")] pub id_type: Type1V<IDTypeV>,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum IDTypeV {
    #[deku(id_pat = "0")] NoIdentity,
    #[deku(id_pat = "1")] IMSI,
    #[deku(id_pat = "2")] IMEI,
    #[deku(id_pat = "3")] IMEISV,
    #[deku(id_pat = "4")] TMSI,
    #[deku(id_pat = "5")] TMGI,
    #[deku(id_pat = "6")] Ffu,
    #[deku(id_pat = "_")] Other,
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::nas::test_utils::*;
    use deku::prelude::*;
    use std::io::Cursor;

    #[test]
    fn test_case_1() {
        let mut bytes = Cursor::new(unhexlify("01"));
        let mut reader = Reader::new(&mut bytes);
        let msg = EMMIdentityRequest::from_reader_with_ctx(&mut reader, ())
            .expect("failed to parse");
        let id_type = msg.id_type.inner;
        assert_eq!(id_type, IDTypeV::IMSI);
    }

    #[test]
    fn test_case_2() {
        let mut bytes = Cursor::new(unhexlify("01"));
        let mut reader = Reader::new(&mut bytes);
        let msg = EMMIdentityRequest::from_reader_with_ctx(&mut reader, ())
            .expect("failed to parse");
        let id_type = msg.id_type.inner;
        assert_eq!(id_type, IDTypeV::IMSI);
    }
}

