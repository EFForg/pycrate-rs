
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EMMGUTIReallocCommand {
    pub guti: Type4LV<EPSID>,
    #[deku(ctx = "Tag(84)")] pub tai_list: Type4TLV<()>,
    #[deku(endian = "big", ctx = "Tag(101)")] pub dcnid: Type4TLV<u16>,
    #[deku(ctx = "Tag(102), NeedsByteSize")] pub ue_radio_cap_id: Type4TLV<Layer3Buffer>,
    #[deku(ctx = "Tag(11)")] pub ue_radio_cap_id_del_ind: Type1TV<UERadioCapIDDelInd>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EPSID {

}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct UERadioCapIDDelInd {
    #[deku(bits = 1)] pub spare: u8,
    pub del_request: UERadioCapIDDelIndDelRequest,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum UERadioCapIDDelIndDelRequest {
    #[deku(id_pat = "0")] UERadioCapabilityIDDeletionNotRequested,
    #[deku(id_pat = "1")] NetworkAssignedUERadioCapabilityIDsDeletionRequested,
    #[deku(id_pat = "_")] Other,
}

