
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EMMULNASTransport {
    #[deku(ctx = "NeedsByteSize")] pub nas_container: Type4LV<Layer3Buffer>,
}


#[cfg(test)]
mod tests {
    use super::*;
    use crate::nas::test_utils::*;
    use deku::prelude::*;
    use std::io::Cursor;

    #[test]
    fn test_case_1() {
        let mut bytes = Cursor::new(unhexlify("2009011d00010007913386094000f01101830a816000000000000005d4f29cae00"));
        let mut reader = Reader::new(&mut bytes);
        let msg = EMMULNASTransport::from_reader_with_ctx(&mut reader, ())
            .expect("failed to parse");
        let nas_container = msg.nas_container.inner;
        assert_eq!(nas_container, vec![9, 1, 29, 0, 1, 0, 7, 145, 51, 134, 9, 64, 0, 240, 17, 1, 131, 10, 129, 96, 0, 0, 0, 0, 0, 0, 5, 212, 242, 156, 174, 0]);
    }
}

