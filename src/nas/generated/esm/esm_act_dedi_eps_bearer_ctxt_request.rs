
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ESMActDediEPSBearerCtxtRequest {
    #[deku(pad_bits_before = "4")] pub linked_eps_bearer_id: Type1V<u8>,
    pub eps_qo_s: Type4LV<EPSQoS>,
    pub tft: Type4LV<TFT>,
    #[deku(ctx = "Tag(93)")] pub ti: Type4TLV<TI>,
    #[deku(ctx = "Tag(48)")] pub qo_s: Type4TLV<QoS>,
    #[deku(bytes = 1, ctx = "Tag(50)")] pub llc_sapi: Type3TV<LLCSAPI>,
    #[deku(ctx = "Tag(8)")] pub radio_priority: Type1TV<RadioPriority>,
    #[deku(ctx = "Tag(52)")] pub packet_flow_id: Type4TLV<PacketFlowId>,
    #[deku(ctx = "Tag(39)")] pub prot_config: Type4TLV<ProtConfig>,
    #[deku(ctx = "Tag(12)")] pub wlan_offload_ind: Type1TV<WLANOffloadAccept>,
    #[deku(ctx = "Tag(51)")] pub nbifom_container: Type4TLV<()>,
    #[deku(ctx = "Tag(123)")] pub ext_prot_config: Type6TLVE<ProtConfig>,
    #[deku(ctx = "Tag(92)")] pub ext_eps_qo_s: Type4TLV<ExtEPSQoS>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EPSQoS {
    #[deku(bytes = 1)] pub qci: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct TFT {
    pub opcode: TFTOpcode,
    pub e: TFTE,
    #[deku(bits = 4)] pub num_pkt_filters: u8,
    pub pkt_filters: (),
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct TI {
    pub ti_flag: TITIFlag,
    #[deku(bits = 3)] pub tio: u8,
    #[deku(bits = 4)] pub spare: u8,
    #[deku(bytes = 0)] pub ext: u8,
    #[deku(bytes = 0)] pub tie: u8,
    #[deku(bytes = 0)] pub ti: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct QoS {
    #[deku(bits = 2)] pub spare_1: u8,
    pub delay_class: QoSDelayClass,
    pub reliability_class: QoSReliabilityClass,
    pub peak_throughput: QoSPeakThroughput,
    #[deku(bits = 1)] pub spare_2: u8,
    pub precedence_class: QoSPrecedenceClass,
    #[deku(bits = 3)] pub spare_3: u8,
    pub mean_throughput: QoSMeanThroughput,
    pub traffic_class: QoSTrafficClass,
    pub delivery_order: QoSDeliveryOrder,
    pub erroneous_sdu: QoSErroneousSDU,
    #[deku(bytes = 1)] pub max_sdu_size: u8,
    #[deku(bytes = 1)] pub max_ul_bitrate: u8,
    #[deku(bytes = 1)] pub max_dl_bitrate: u8,
    #[deku(bits = 4)] pub residual_ber: u8,
    #[deku(bits = 4)] pub sdu_error_ratio: u8,
    #[deku(bits = 6)] pub transfer_delay: u8,
    #[deku(bits = 2)] pub traffic_handling_priority: u8,
    #[deku(bytes = 1)] pub guaranteed_ul_bitrate: u8,
    #[deku(bytes = 1)] pub guaranteed_dl_bitrate: u8,
    #[deku(bits = 3)] pub spare_4: u8,
    pub signalling_ind: QoSSignallingInd,
    pub source_stats_desc: QoSSourceStatsDesc,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct LLCSAPI {
    #[deku(bits = 4)] pub spare: u8,
    pub value: LLCSAPIValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct RadioPriority {
    #[deku(bits = 1)] pub spare: u8,
    pub value: RadioPriorityValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct PacketFlowId {
    #[deku(bits = 1)] pub spare: u8,
    pub value: PacketFlowIdValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ProtConfig {
    #[deku(bits = 1)] pub ext: u8,
    #[deku(bits = 4)] pub spare: u8,
    pub prot: ProtConfigProt,
    pub config: (),
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct WLANOffloadAccept {
    #[deku(bits = 2)] pub spare: u8,
    pub utran_offload_accept: WLANOffloadAcceptUTRANOffloadAccept,
    pub eutran_offload_accept: WLANOffloadAcceptEUTRANOffloadAccept,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ExtEPSQoS {
    pub unit_max_bitrate: ExtEPSQoSUnitMaxBitrate,
    #[deku(bytes = 2, endian = "big")] pub max_ul_bitrate: u16,
    #[deku(bytes = 2, endian = "big")] pub max_dl_bitrate: u16,
    pub unit_guaranteed_bitrate: ExtEPSQoSUnitGuaranteedBitrate,
    #[deku(bytes = 2, endian = "big")] pub guaranteed_ul_bitrate: u16,
    #[deku(bytes = 2, endian = "big")] pub guaranteed_dl_bitrate: u16,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ExtEPSQoSUnitMaxBitrate {
    #[deku(id_pat = "1")] TwoHundredKbps,
    #[deku(id_pat = "2")] OneMbps,
    #[deku(id_pat = "3")] FourMbps,
    #[deku(id_pat = "4")] SixteenMbps,
    #[deku(id_pat = "5")] SixtyFourMbps,
    #[deku(id_pat = "6")] TwoHundredAndFiftySixMbps,
    #[deku(id_pat = "7")] OneGbps,
    #[deku(id_pat = "8")] FourGbps,
    #[deku(id_pat = "9")] SixteenGbps,
    #[deku(id_pat = "10")] SixtyFourGbps,
    #[deku(id_pat = "11")] TwoHundredAndFiftySixGbps,
    #[deku(id_pat = "12")] OneTbps,
    #[deku(id_pat = "13")] FourTbps,
    #[deku(id_pat = "14")] SixteenTbps,
    #[deku(id_pat = "15")] SixtyFourTbps,
    #[deku(id_pat = "16")] TwoHundredAndFiftySixTbps,
    #[deku(id_pat = "17")] OnePbps,
    #[deku(id_pat = "18")] FourPbps,
    #[deku(id_pat = "19")] SixteenPbps,
    #[deku(id_pat = "20")] SixtyFourPbps,
    #[deku(id_pat = "21")] TwoHundredAndFiftySixPbps,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ExtEPSQoSUnitGuaranteedBitrate {
    #[deku(id_pat = "1")] TwoHundredKbps,
    #[deku(id_pat = "2")] OneMbps,
    #[deku(id_pat = "3")] FourMbps,
    #[deku(id_pat = "4")] SixteenMbps,
    #[deku(id_pat = "5")] SixtyFourMbps,
    #[deku(id_pat = "6")] TwoHundredAndFiftySixMbps,
    #[deku(id_pat = "7")] OneGbps,
    #[deku(id_pat = "8")] FourGbps,
    #[deku(id_pat = "9")] SixteenGbps,
    #[deku(id_pat = "10")] SixtyFourGbps,
    #[deku(id_pat = "11")] TwoHundredAndFiftySixGbps,
    #[deku(id_pat = "12")] OneTbps,
    #[deku(id_pat = "13")] FourTbps,
    #[deku(id_pat = "14")] SixteenTbps,
    #[deku(id_pat = "15")] SixtyFourTbps,
    #[deku(id_pat = "16")] TwoHundredAndFiftySixTbps,
    #[deku(id_pat = "17")] OnePbps,
    #[deku(id_pat = "18")] FourPbps,
    #[deku(id_pat = "19")] SixteenPbps,
    #[deku(id_pat = "20")] SixtyFourPbps,
    #[deku(id_pat = "21")] TwoHundredAndFiftySixPbps,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum WLANOffloadAcceptUTRANOffloadAccept {
    #[deku(id_pat = "0")] OffloadingTheTrafficOfThePDNConnectionViaAWLANWhenInIuModeIsNotAcceptable,
    #[deku(id_pat = "1")] OffloadingTheTrafficOfThePDNConnectionViaAWLANWhenInIuModeIsAcceptable,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum WLANOffloadAcceptEUTRANOffloadAccept {
    #[deku(id_pat = "0")] OffloadingTheTrafficOfThePDNConnectionViaAWLANWhenInS1ModeIsNotAcceptable,
    #[deku(id_pat = "1")] OffloadingTheTrafficOfThePDNConnectionViaAWLANWhenInS1ModeIsAcceptable,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum ProtConfigProt {
    #[deku(id_pat = "0")] PPPWithIPPDP,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 7)]
pub enum PacketFlowIdValue {
    #[deku(id_pat = "0")] BestEffort,
    #[deku(id_pat = "1")] Signaling,
    #[deku(id_pat = "2")] SMS,
    #[deku(id_pat = "3")] TOM8,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum RadioPriorityValue {
    #[deku(id_pat = "1")] PriorityLevel1Highest,
    #[deku(id_pat = "2")] PriorityLevel2,
    #[deku(id_pat = "3")] PriorityLevel3,
    #[deku(id_pat = "4")] PriorityLevel4Lowest,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum LLCSAPIValue {
    #[deku(id_pat = "0")] NotAssigned,
    #[deku(id_pat = "1 | 2 | 4 | 6 | 7 | 8 | 10 | 11 | 12 | 13 | 14 | 15")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSDelayClass {
    #[deku(id_pat = "0")] SubscribedDelayClass,
    #[deku(id_pat = "1")] DelayClass1,
    #[deku(id_pat = "2")] DelayClass2,
    #[deku(id_pat = "3")] DelayClass3,
    #[deku(id_pat = "4")] DelayClass4BestEffort,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSReliabilityClass {
    #[deku(id_pat = "0")] SubscribedReliabilityClass,
    #[deku(id_pat = "1")] UnusedInterpretedAsUnackGTPAckLLCAndRLCProtectedData,
    #[deku(id_pat = "2")] UnackGTPAckLLCAndRLCProtectedData,
    #[deku(id_pat = "3")] UnackGTPAndLLCAckRLCProtectedData,
    #[deku(id_pat = "4")] UnackGTPLLCAndRLCProtectedData,
    #[deku(id_pat = "5")] UnackGTPLLCAndRLCUnprotectedData,
    #[deku(id_pat = "6")] UnackGTPAndRLCAckLLCProtectedData,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum QoSPeakThroughput {
    #[deku(id_pat = "0")] SubscribedPeakThroughput,
    #[deku(id_pat = "1")] UpTo1000OctetS,
    #[deku(id_pat = "2")] UpTo2000OctetS,
    #[deku(id_pat = "3")] UpTo4000OctetS,
    #[deku(id_pat = "4")] UpTo8000OctetS,
    #[deku(id_pat = "5")] UpTo16000OctetS,
    #[deku(id_pat = "6")] UpTo32000OctetS,
    #[deku(id_pat = "7")] UpTo64000OctetS,
    #[deku(id_pat = "8")] UpTo128000OctetS,
    #[deku(id_pat = "9")] UpTo256000OctetS,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSPrecedenceClass {
    #[deku(id_pat = "0")] SubscribedPrecedence,
    #[deku(id_pat = "1")] HighPriority,
    #[deku(id_pat = "2 | 4")] NormalPriority,
    #[deku(id_pat = "3")] LowPriority,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 5)]
pub enum QoSMeanThroughput {
    #[deku(id_pat = "0")] SubscribedMeanThroughput,
    #[deku(id_pat = "1")] OneHundredOctetH,
    #[deku(id_pat = "2")] TwoHundredOctetH,
    #[deku(id_pat = "3")] FiveHundredOctetH,
    #[deku(id_pat = "4")] One000OctetH,
    #[deku(id_pat = "5")] Two000OctetH,
    #[deku(id_pat = "6")] Five000OctetH,
    #[deku(id_pat = "7")] Ten000OctetH,
    #[deku(id_pat = "8")] Twenty000OctetH,
    #[deku(id_pat = "9")] Fifty000OctetH,
    #[deku(id_pat = "10")] OneHundred000OctetH,
    #[deku(id_pat = "11")] TwoHundred000OctetH,
    #[deku(id_pat = "12")] FiveHundred000OctetH,
    #[deku(id_pat = "13")] One000000OctetH,
    #[deku(id_pat = "14")] Two000000OctetH,
    #[deku(id_pat = "15")] Five000000OctetH,
    #[deku(id_pat = "16")] Ten000000OctetH,
    #[deku(id_pat = "17")] Twenty000000OctetH,
    #[deku(id_pat = "18")] Fifty000000OctetH,
    #[deku(id_pat = "30")] Reserved,
    #[deku(id_pat = "31")] BestEffort,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSTrafficClass {
    #[deku(id_pat = "0")] SubscribedTrafficClass,
    #[deku(id_pat = "1")] ConversationalClass,
    #[deku(id_pat = "2")] StreamingClass,
    #[deku(id_pat = "3")] InteractiveClass,
    #[deku(id_pat = "4")] BackgroundClass,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 2)]
pub enum QoSDeliveryOrder {
    #[deku(id_pat = "0")] SubscribedDeliveryOrder,
    #[deku(id_pat = "1")] WithDeliveryOrder,
    #[deku(id_pat = "2")] WithoutDeliveryOrder,
    #[deku(id_pat = "3")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSErroneousSDU {
    #[deku(id_pat = "0")] SubscribedDeliveryOfErroneousSDUs,
    #[deku(id_pat = "1")] NoDetect,
    #[deku(id_pat = "2")] ErroneousSDUsAreDelivered,
    #[deku(id_pat = "3")] ErroneousSDUsAreNotDelivered,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum QoSSignallingInd {
    #[deku(id_pat = "0")] NotOptimisedForSignalling,
    #[deku(id_pat = "1")] OptimisedForSignalling,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum QoSSourceStatsDesc {
    #[deku(id_pat = "0")] Unknown,
    #[deku(id_pat = "1")] Speech,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum TITIFlag {
    #[deku(id_pat = "0")] AllocatedBySender,
    #[deku(id_pat = "1")] AllocatedByReceiver,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum TFTOpcode {
    #[deku(id_pat = "0")] IgnoreThisIE,
    #[deku(id_pat = "1")] CreateNewTFT,
    #[deku(id_pat = "2")] DeleteExistingTFT,
    #[deku(id_pat = "3")] AddPacketFiltersToExistingTFT,
    #[deku(id_pat = "4")] ReplacePacketFiltersInExistingTFT,
    #[deku(id_pat = "5")] DeletePacketFiltersFromExistingTFT,
    #[deku(id_pat = "6")] NoTFTOperation,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum TFTE {
    #[deku(id_pat = "0")] NoParametersList,
    #[deku(id_pat = "1")] ParametersListIncluded,
    #[deku(id_pat = "_")] Other,
}

