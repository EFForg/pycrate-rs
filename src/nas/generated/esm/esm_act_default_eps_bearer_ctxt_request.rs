
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ESMActDefaultEPSBearerCtxtRequest {
    pub eps_qo_s: Type4LV<EPSQoS>,
    pub apn: Type4LV<()>,
    #[deku(ctx = "NeedsByteSize")] pub pdn_addr: Type4LV<PDNAddr>,
    #[deku(ctx = "Tag(93)")] pub ti: Type4TLV<TI>,
    #[deku(ctx = "Tag(48)")] pub qo_s: Type4TLV<QoS>,
    #[deku(bytes = 1, ctx = "Tag(50)")] pub llc_sapi: Type3TV<LLCSAPI>,
    #[deku(ctx = "Tag(8)")] pub radio_priority: Type1TV<RadioPriority>,
    #[deku(ctx = "Tag(52)")] pub packet_flow_id: Type4TLV<PacketFlowId>,
    #[deku(ctx = "Tag(94), NeedsByteSize")] pub apn_ambr: Type4TLV<APNAMBR>,
    #[deku(bytes = 1, ctx = "Tag(88)")] pub esm_cause: Type3TV<ESMCauseESMCause>,
    #[deku(ctx = "Tag(39)")] pub prot_config: Type4TLV<ProtConfig>,
    #[deku(ctx = "Tag(11)")] pub con_type: Type1TV<ConTypeV>,
    #[deku(ctx = "Tag(12)")] pub wlan_offload_ind: Type1TV<WLANOffloadAccept>,
    #[deku(ctx = "Tag(51)")] pub nbifom_container: Type4TLV<()>,
    #[deku(ctx = "Tag(102), NeedsByteSize")] pub hdr_comp_config: Type4TLV<HdrCompConfig>,
    #[deku(ctx = "Tag(9)")] pub cp_only_ind: Type1TV<CPOnlyInd>,
    #[deku(ctx = "Tag(123)")] pub ext_prot_config: Type6TLVE<ProtConfig>,
    #[deku(ctx = "Tag(110)")] pub serving_plmn_rate_ctrl: Type4TLV<ServingPLMNRateCtrlServingPLMNRateCtrl>,
    #[deku(ctx = "Tag(95)")] pub ext_apn_ambr: Type4TLV<ExtAPNAMBR>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EPSQoS {
    #[deku(bytes = 1)] pub qci: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
#[deku(ctx = "ByteSize(byte_size): ByteSize")]
pub struct PDNAddr {
    #[deku(bits = 5)] pub spare: u8,
    pub typ: PDNAddrType,
    #[deku(count = "byte_size - deku::byte_offset")] pub addr: Vec<u8>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct TI {
    pub ti_flag: TITIFlag,
    #[deku(bits = 3)] pub tio: u8,
    #[deku(bits = 4)] pub spare: u8,
    #[deku(bytes = 0)] pub ext: u8,
    #[deku(bytes = 0)] pub tie: u8,
    #[deku(bytes = 0)] pub ti: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct QoS {
    #[deku(bits = 2)] pub spare_1: u8,
    pub delay_class: QoSDelayClass,
    pub reliability_class: QoSReliabilityClass,
    pub peak_throughput: QoSPeakThroughput,
    #[deku(bits = 1)] pub spare_2: u8,
    pub precedence_class: QoSPrecedenceClass,
    #[deku(bits = 3)] pub spare_3: u8,
    pub mean_throughput: QoSMeanThroughput,
    pub traffic_class: QoSTrafficClass,
    pub delivery_order: QoSDeliveryOrder,
    pub erroneous_sdu: QoSErroneousSDU,
    #[deku(bytes = 1)] pub max_sdu_size: u8,
    #[deku(bytes = 1)] pub max_ul_bitrate: u8,
    #[deku(bytes = 1)] pub max_dl_bitrate: u8,
    #[deku(bits = 4)] pub residual_ber: u8,
    #[deku(bits = 4)] pub sdu_error_ratio: u8,
    #[deku(bits = 6)] pub transfer_delay: u8,
    #[deku(bits = 2)] pub traffic_handling_priority: u8,
    #[deku(bytes = 1)] pub guaranteed_ul_bitrate: u8,
    #[deku(bytes = 1)] pub guaranteed_dl_bitrate: u8,
    #[deku(bits = 3)] pub spare_4: u8,
    pub signalling_ind: QoSSignallingInd,
    pub source_stats_desc: QoSSourceStatsDesc,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct LLCSAPI {
    #[deku(bits = 4)] pub spare: u8,
    pub value: LLCSAPIValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct RadioPriority {
    #[deku(bits = 1)] pub spare: u8,
    pub value: RadioPriorityValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct PacketFlowId {
    #[deku(bits = 1)] pub spare: u8,
    pub value: PacketFlowIdValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
#[deku(ctx = "ByteSize(byte_size): ByteSize")]
pub struct APNAMBR {
    #[deku(bytes = 1, cond = "deku::byte_offset < byte_size")] pub dl: u8,
    #[deku(bytes = 1, cond = "deku::byte_offset < byte_size")] pub ul: u8,
    #[deku(bytes = 0, cond = "deku::byte_offset < byte_size")] pub dl_ext: u8,
    #[deku(bytes = 0, cond = "deku::byte_offset < byte_size")] pub ul_ext: u8,
    #[deku(bytes = 0, cond = "deku::byte_offset < byte_size")] pub dl_ext_2: u8,
    #[deku(bytes = 0, cond = "deku::byte_offset < byte_size")] pub ul_ext_2: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ProtConfig {
    #[deku(bits = 1)] pub ext: u8,
    #[deku(bits = 4)] pub spare: u8,
    pub prot: ProtConfigProt,
    pub config: (),
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct WLANOffloadAccept {
    #[deku(bits = 2)] pub spare: u8,
    pub utran_offload_accept: WLANOffloadAcceptUTRANOffloadAccept,
    pub eutran_offload_accept: WLANOffloadAcceptEUTRANOffloadAccept,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
#[deku(ctx = "ByteSize(byte_size): ByteSize")]
pub struct HdrCompConfig {
    #[deku(bits = 1)] pub spare: u8,
    #[deku(bits = 1)] pub p_0x0104: u8,
    #[deku(bits = 1)] pub p_0x0103: u8,
    #[deku(bits = 1)] pub p_0x0102: u8,
    #[deku(bits = 1)] pub p_0x0006: u8,
    #[deku(bits = 1)] pub p_0x0004: u8,
    #[deku(bits = 1)] pub p_0x0003: u8,
    #[deku(bits = 1)] pub p_0x0002: u8,
    #[deku(bytes = 2, endian = "big")] pub max_cid: u16,
    pub params_type: HdrCompConfigParamsType,
    #[deku(count = "byte_size - deku::byte_offset")] pub params_container: Vec<u8>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct CPOnlyInd {
    #[deku(bits = 3)] pub spare: u8,
    pub value: CPOnlyIndValue,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ExtAPNAMBR {
    pub unit_dl: ExtAPNAMBRUnitDL,
    #[deku(bytes = 2, endian = "big")] pub dl: u16,
    pub unit_ul: ExtAPNAMBRUnitUL,
    #[deku(bytes = 2, endian = "big")] pub ul: u16,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ESMCauseESMCause {
    #[deku(id_pat = "8")] OperatorDeterminedBarring,
    #[deku(id_pat = "26")] InsufficientResources,
    #[deku(id_pat = "27")] MissingOrUnknownAPN,
    #[deku(id_pat = "28")] UnknownPDNType,
    #[deku(id_pat = "29")] UserAuthenticationFailed,
    #[deku(id_pat = "30")] RequestRejectedByServingGWOrPDNGW,
    #[deku(id_pat = "31")] RequestRejectedUnspecified,
    #[deku(id_pat = "32")] ServiceOptionNotSupported,
    #[deku(id_pat = "33")] RequestedServiceOptionNotSubscribed,
    #[deku(id_pat = "34")] ServiceOptionTemporarilyOutOfOrder,
    #[deku(id_pat = "35")] PTIAlreadyInUse,
    #[deku(id_pat = "36")] RegularDeactivation,
    #[deku(id_pat = "37")] EPSQoSNotAccepted,
    #[deku(id_pat = "38")] NetworkFailure,
    #[deku(id_pat = "39")] ReactivationRequested,
    #[deku(id_pat = "41")] SemanticErrorInTheTFTOperation,
    #[deku(id_pat = "42")] SyntacticalErrorInTheTFTOperation,
    #[deku(id_pat = "43")] InvalidEPSBearerIdentity,
    #[deku(id_pat = "44")] SemanticErrorsInPacketFilterS,
    #[deku(id_pat = "45")] SyntacticalErrorsInPacketFilterS,
    #[deku(id_pat = "46")] UnusedSeeNOTE2,
    #[deku(id_pat = "47")] PTIMismatch,
    #[deku(id_pat = "49")] LastPDNDisconnectionNotAllowed,
    #[deku(id_pat = "50")] PDNTypeIPv4OnlyAllowed,
    #[deku(id_pat = "51")] PDNTypeIPv6OnlyAllowed,
    #[deku(id_pat = "52")] SingleAddressBearersOnlyAllowed,
    #[deku(id_pat = "53")] ESMInformationNotReceived,
    #[deku(id_pat = "54")] PDNConnectionDoesNotExist,
    #[deku(id_pat = "55")] MultiplePDNConnectionsForAGivenAPNNotAllowed,
    #[deku(id_pat = "56")] CollisionWithNetworkInitiatedRequest,
    #[deku(id_pat = "59")] UnsupportedQCIValue,
    #[deku(id_pat = "60")] BearerHandlingNotSupported,
    #[deku(id_pat = "65")] MaximumNumberOfEPSBearersReached,
    #[deku(id_pat = "66")] RequestedAPNNotSupportedInCurrentRATAndPLMNCombination,
    #[deku(id_pat = "81")] InvalidPTIValue,
    #[deku(id_pat = "95")] SemanticallyIncorrectMessage,
    #[deku(id_pat = "96")] InvalidMandatoryInformation,
    #[deku(id_pat = "97")] MessageTypeNonExistentOrNotImplemented,
    #[deku(id_pat = "98")] MessageTypeNotCompatibleWithTheProtocolState,
    #[deku(id_pat = "99")] InformationElementNonExistentOrNotImplemented,
    #[deku(id_pat = "100")] ConditionalIEError,
    #[deku(id_pat = "101")] MessageNotCompatibleWithTheProtocolState,
    #[deku(id_pat = "111")] ProtocolErrorUnspecified,
    #[deku(id_pat = "112")] APNRestrictionValueIncompatibleWithActiveEPSBearerContext,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum ConTypeV {
    #[deku(id_pat = "0")] ThePDNConnectionTypeIsNotIndicated,
    #[deku(id_pat = "1")] ThePDNConnectionIsConsideredALIPAPDNConnection,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u16", bits = 16, endian = "big")]
pub enum ServingPLMNRateCtrlServingPLMNRateCtrl {
    #[deku(id_pat = "65535")] NotRestricted,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ExtAPNAMBRUnitDL {
    #[deku(id_pat = "1")] TwoHundredKbps,
    #[deku(id_pat = "2")] OneMbps,
    #[deku(id_pat = "3")] FourMbps,
    #[deku(id_pat = "4")] SixteenMbps,
    #[deku(id_pat = "5")] SixtyFourMbps,
    #[deku(id_pat = "6")] TwoHundredAndFiftySixMbps,
    #[deku(id_pat = "7")] OneGbps,
    #[deku(id_pat = "8")] FourGbps,
    #[deku(id_pat = "9")] SixteenGbps,
    #[deku(id_pat = "10")] SixtyFourGbps,
    #[deku(id_pat = "11")] TwoHundredAndFiftySixGbps,
    #[deku(id_pat = "12")] OneTbps,
    #[deku(id_pat = "13")] FourTbps,
    #[deku(id_pat = "14")] SixteenTbps,
    #[deku(id_pat = "15")] SixtyFourTbps,
    #[deku(id_pat = "16")] TwoHundredAndFiftySixTbps,
    #[deku(id_pat = "17")] OnePbps,
    #[deku(id_pat = "18")] FourPbps,
    #[deku(id_pat = "19")] SixteenPbps,
    #[deku(id_pat = "20")] SixtyFourPbps,
    #[deku(id_pat = "21")] TwoHundredAndFiftySixPbps,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ExtAPNAMBRUnitUL {
    #[deku(id_pat = "1")] TwoHundredKbps,
    #[deku(id_pat = "2")] OneMbps,
    #[deku(id_pat = "3")] FourMbps,
    #[deku(id_pat = "4")] SixteenMbps,
    #[deku(id_pat = "5")] SixtyFourMbps,
    #[deku(id_pat = "6")] TwoHundredAndFiftySixMbps,
    #[deku(id_pat = "7")] OneGbps,
    #[deku(id_pat = "8")] FourGbps,
    #[deku(id_pat = "9")] SixteenGbps,
    #[deku(id_pat = "10")] SixtyFourGbps,
    #[deku(id_pat = "11")] TwoHundredAndFiftySixGbps,
    #[deku(id_pat = "12")] OneTbps,
    #[deku(id_pat = "13")] FourTbps,
    #[deku(id_pat = "14")] SixteenTbps,
    #[deku(id_pat = "15")] SixtyFourTbps,
    #[deku(id_pat = "16")] TwoHundredAndFiftySixTbps,
    #[deku(id_pat = "17")] OnePbps,
    #[deku(id_pat = "18")] FourPbps,
    #[deku(id_pat = "19")] SixteenPbps,
    #[deku(id_pat = "20")] SixtyFourPbps,
    #[deku(id_pat = "21")] TwoHundredAndFiftySixPbps,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum CPOnlyIndValue {
    #[deku(id_pat = "0")] PDNConnectionCanBeUsedWithUserPlaneRadioBearerS,
    #[deku(id_pat = "1")] PDNConnectionCanBeUsedForControlPlaneCIoTEPSOptimizationOnly,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 0)]
pub enum HdrCompConfigParamsType {
    #[deku(id_pat = "0")] ZeroNoCompression,
    #[deku(id_pat = "1")] TwoUDPIP,
    #[deku(id_pat = "2")] ThreeESPIP,
    #[deku(id_pat = "3")] FourIP,
    #[deku(id_pat = "4")] SixTCPIP,
    #[deku(id_pat = "5")] OneHundredAndTwoUDPIP,
    #[deku(id_pat = "6")] OneHundredAndThreeESPIP,
    #[deku(id_pat = "7")] OneHundredAndFourIP,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum WLANOffloadAcceptUTRANOffloadAccept {
    #[deku(id_pat = "0")] OffloadingTheTrafficOfThePDNConnectionViaAWLANWhenInIuModeIsNotAcceptable,
    #[deku(id_pat = "1")] OffloadingTheTrafficOfThePDNConnectionViaAWLANWhenInIuModeIsAcceptable,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum WLANOffloadAcceptEUTRANOffloadAccept {
    #[deku(id_pat = "0")] OffloadingTheTrafficOfThePDNConnectionViaAWLANWhenInS1ModeIsNotAcceptable,
    #[deku(id_pat = "1")] OffloadingTheTrafficOfThePDNConnectionViaAWLANWhenInS1ModeIsAcceptable,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum ProtConfigProt {
    #[deku(id_pat = "0")] PPPWithIPPDP,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 7)]
pub enum PacketFlowIdValue {
    #[deku(id_pat = "0")] BestEffort,
    #[deku(id_pat = "1")] Signaling,
    #[deku(id_pat = "2")] SMS,
    #[deku(id_pat = "3")] TOM8,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum RadioPriorityValue {
    #[deku(id_pat = "1")] PriorityLevel1Highest,
    #[deku(id_pat = "2")] PriorityLevel2,
    #[deku(id_pat = "3")] PriorityLevel3,
    #[deku(id_pat = "4")] PriorityLevel4Lowest,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum LLCSAPIValue {
    #[deku(id_pat = "0")] NotAssigned,
    #[deku(id_pat = "1 | 2 | 4 | 6 | 7 | 8 | 10 | 11 | 12 | 13 | 14 | 15")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSDelayClass {
    #[deku(id_pat = "0")] SubscribedDelayClass,
    #[deku(id_pat = "1")] DelayClass1,
    #[deku(id_pat = "2")] DelayClass2,
    #[deku(id_pat = "3")] DelayClass3,
    #[deku(id_pat = "4")] DelayClass4BestEffort,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSReliabilityClass {
    #[deku(id_pat = "0")] SubscribedReliabilityClass,
    #[deku(id_pat = "1")] UnusedInterpretedAsUnackGTPAckLLCAndRLCProtectedData,
    #[deku(id_pat = "2")] UnackGTPAckLLCAndRLCProtectedData,
    #[deku(id_pat = "3")] UnackGTPAndLLCAckRLCProtectedData,
    #[deku(id_pat = "4")] UnackGTPLLCAndRLCProtectedData,
    #[deku(id_pat = "5")] UnackGTPLLCAndRLCUnprotectedData,
    #[deku(id_pat = "6")] UnackGTPAndRLCAckLLCProtectedData,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum QoSPeakThroughput {
    #[deku(id_pat = "0")] SubscribedPeakThroughput,
    #[deku(id_pat = "1")] UpTo1000OctetS,
    #[deku(id_pat = "2")] UpTo2000OctetS,
    #[deku(id_pat = "3")] UpTo4000OctetS,
    #[deku(id_pat = "4")] UpTo8000OctetS,
    #[deku(id_pat = "5")] UpTo16000OctetS,
    #[deku(id_pat = "6")] UpTo32000OctetS,
    #[deku(id_pat = "7")] UpTo64000OctetS,
    #[deku(id_pat = "8")] UpTo128000OctetS,
    #[deku(id_pat = "9")] UpTo256000OctetS,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSPrecedenceClass {
    #[deku(id_pat = "0")] SubscribedPrecedence,
    #[deku(id_pat = "1")] HighPriority,
    #[deku(id_pat = "2 | 4")] NormalPriority,
    #[deku(id_pat = "3")] LowPriority,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 5)]
pub enum QoSMeanThroughput {
    #[deku(id_pat = "0")] SubscribedMeanThroughput,
    #[deku(id_pat = "1")] OneHundredOctetH,
    #[deku(id_pat = "2")] TwoHundredOctetH,
    #[deku(id_pat = "3")] FiveHundredOctetH,
    #[deku(id_pat = "4")] One000OctetH,
    #[deku(id_pat = "5")] Two000OctetH,
    #[deku(id_pat = "6")] Five000OctetH,
    #[deku(id_pat = "7")] Ten000OctetH,
    #[deku(id_pat = "8")] Twenty000OctetH,
    #[deku(id_pat = "9")] Fifty000OctetH,
    #[deku(id_pat = "10")] OneHundred000OctetH,
    #[deku(id_pat = "11")] TwoHundred000OctetH,
    #[deku(id_pat = "12")] FiveHundred000OctetH,
    #[deku(id_pat = "13")] One000000OctetH,
    #[deku(id_pat = "14")] Two000000OctetH,
    #[deku(id_pat = "15")] Five000000OctetH,
    #[deku(id_pat = "16")] Ten000000OctetH,
    #[deku(id_pat = "17")] Twenty000000OctetH,
    #[deku(id_pat = "18")] Fifty000000OctetH,
    #[deku(id_pat = "30")] Reserved,
    #[deku(id_pat = "31")] BestEffort,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSTrafficClass {
    #[deku(id_pat = "0")] SubscribedTrafficClass,
    #[deku(id_pat = "1")] ConversationalClass,
    #[deku(id_pat = "2")] StreamingClass,
    #[deku(id_pat = "3")] InteractiveClass,
    #[deku(id_pat = "4")] BackgroundClass,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 2)]
pub enum QoSDeliveryOrder {
    #[deku(id_pat = "0")] SubscribedDeliveryOrder,
    #[deku(id_pat = "1")] WithDeliveryOrder,
    #[deku(id_pat = "2")] WithoutDeliveryOrder,
    #[deku(id_pat = "3")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum QoSErroneousSDU {
    #[deku(id_pat = "0")] SubscribedDeliveryOfErroneousSDUs,
    #[deku(id_pat = "1")] NoDetect,
    #[deku(id_pat = "2")] ErroneousSDUsAreDelivered,
    #[deku(id_pat = "3")] ErroneousSDUsAreNotDelivered,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum QoSSignallingInd {
    #[deku(id_pat = "0")] NotOptimisedForSignalling,
    #[deku(id_pat = "1")] OptimisedForSignalling,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 4)]
pub enum QoSSourceStatsDesc {
    #[deku(id_pat = "0")] Unknown,
    #[deku(id_pat = "1")] Speech,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum TITIFlag {
    #[deku(id_pat = "0")] AllocatedBySender,
    #[deku(id_pat = "1")] AllocatedByReceiver,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum PDNAddrType {
    #[deku(id_pat = "1")] IPv4,
    #[deku(id_pat = "2")] IPv6,
    #[deku(id_pat = "3")] IPv4V6,
    #[deku(id_pat = "4")] NonIP,
    #[deku(id_pat = "_")] Other,
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::nas::test_utils::*;
    use deku::prelude::*;
    use std::io::Cursor;

    #[test]
    fn test_case_1() {
        let mut bytes = Cursor::new(unhexlify("01051703696d73066d6e63343830066d6363333131046770727309020000000016f6a0df5e02b5b5583327838080211003000010810600000000830600000000000110200148880002713a00a0010400000071000110200148880004fe0000b0010400000259000110200148880004fe0000b0010400000205000310200148880016ff0001e1000d00000000000310200148880017ff0001e4000d00000000001002059400050102ff000413018405500bf6130184fa6aaec191ee7d5302172c3404030019f1640103"));
        let mut reader = Reader::new(&mut bytes);
        let msg = ESMActDefaultEPSBearerCtxtRequest::from_reader_with_ctx(&mut reader, ())
            .expect("failed to parse");
        let eps_qo_s = msg.eps_qo_s.inner;
        assert_eq!(eps_qo_s.qci, 5);
        let pdn_addr = msg.pdn_addr.inner;
        assert_eq!(pdn_addr.typ, PDNAddrType::IPv6);
        assert_eq!(pdn_addr.addr, vec![0, 0, 0, 0, 22, 246, 160, 223]);
        let apn_ambr = msg.apn_ambr.inner.unwrap();
        assert_eq!(apn_ambr.dl, 181);
        assert_eq!(apn_ambr.ul, 181);
        let esm_cause = msg.esm_cause.inner.unwrap();
        assert_eq!(esm_cause, ESMCauseESMCause::PDNTypeIPv6OnlyAllowed);
        let prot_config = msg.prot_config.inner.unwrap();
        assert_eq!(prot_config.ext, 1);
        assert_eq!(prot_config.prot, ProtConfigProt::PPPWithIPPDP);
    }
}

