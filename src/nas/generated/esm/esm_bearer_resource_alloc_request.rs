
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ESMBearerResourceAllocRequest {
    #[deku(pad_bits_before = "4")] pub linked_eps_bearer_id: Type1V<u8>,
    pub tf_aggregate: Type4LV<TFAggregate>,
    pub eps_qo_s: Type4LV<EPSQoS>,
    #[deku(ctx = "Tag(39)")] pub prot_config: Type4TLV<ProtConfig>,
    #[deku(ctx = "Tag(12)")] pub device_prop: Type1TV<DeviceProp>,
    #[deku(ctx = "Tag(51)")] pub nbifom_container: Type4TLV<()>,
    #[deku(ctx = "Tag(123)")] pub ext_prot_config: Type6TLVE<ProtConfig>,
    #[deku(ctx = "Tag(92)")] pub ext_eps_qo_s: Type4TLV<ExtEPSQoS>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct TFAggregate {
    pub opcode: TFAggregateOpcode,
    pub e: TFAggregateE,
    #[deku(bits = 4)] pub num_pkt_filters: u8,
    pub pkt_filters: (),
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EPSQoS {
    #[deku(bytes = 1)] pub qci: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ProtConfig {
    #[deku(bits = 1)] pub ext: u8,
    #[deku(bits = 4)] pub spare: u8,
    pub prot: ProtConfigProt,
    pub config: (),
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct DeviceProp {
    #[deku(bits = 3)] pub spare: u8,
    #[deku(bits = 1)] pub low_priority: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ExtEPSQoS {
    pub unit_max_bitrate: ExtEPSQoSUnitMaxBitrate,
    #[deku(bytes = 2, endian = "big")] pub max_ul_bitrate: u16,
    #[deku(bytes = 2, endian = "big")] pub max_dl_bitrate: u16,
    pub unit_guaranteed_bitrate: ExtEPSQoSUnitGuaranteedBitrate,
    #[deku(bytes = 2, endian = "big")] pub guaranteed_ul_bitrate: u16,
    #[deku(bytes = 2, endian = "big")] pub guaranteed_dl_bitrate: u16,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ExtEPSQoSUnitMaxBitrate {
    #[deku(id_pat = "1")] TwoHundredKbps,
    #[deku(id_pat = "2")] OneMbps,
    #[deku(id_pat = "3")] FourMbps,
    #[deku(id_pat = "4")] SixteenMbps,
    #[deku(id_pat = "5")] SixtyFourMbps,
    #[deku(id_pat = "6")] TwoHundredAndFiftySixMbps,
    #[deku(id_pat = "7")] OneGbps,
    #[deku(id_pat = "8")] FourGbps,
    #[deku(id_pat = "9")] SixteenGbps,
    #[deku(id_pat = "10")] SixtyFourGbps,
    #[deku(id_pat = "11")] TwoHundredAndFiftySixGbps,
    #[deku(id_pat = "12")] OneTbps,
    #[deku(id_pat = "13")] FourTbps,
    #[deku(id_pat = "14")] SixteenTbps,
    #[deku(id_pat = "15")] SixtyFourTbps,
    #[deku(id_pat = "16")] TwoHundredAndFiftySixTbps,
    #[deku(id_pat = "17")] OnePbps,
    #[deku(id_pat = "18")] FourPbps,
    #[deku(id_pat = "19")] SixteenPbps,
    #[deku(id_pat = "20")] SixtyFourPbps,
    #[deku(id_pat = "21")] TwoHundredAndFiftySixPbps,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ExtEPSQoSUnitGuaranteedBitrate {
    #[deku(id_pat = "1")] TwoHundredKbps,
    #[deku(id_pat = "2")] OneMbps,
    #[deku(id_pat = "3")] FourMbps,
    #[deku(id_pat = "4")] SixteenMbps,
    #[deku(id_pat = "5")] SixtyFourMbps,
    #[deku(id_pat = "6")] TwoHundredAndFiftySixMbps,
    #[deku(id_pat = "7")] OneGbps,
    #[deku(id_pat = "8")] FourGbps,
    #[deku(id_pat = "9")] SixteenGbps,
    #[deku(id_pat = "10")] SixtyFourGbps,
    #[deku(id_pat = "11")] TwoHundredAndFiftySixGbps,
    #[deku(id_pat = "12")] OneTbps,
    #[deku(id_pat = "13")] FourTbps,
    #[deku(id_pat = "14")] SixteenTbps,
    #[deku(id_pat = "15")] SixtyFourTbps,
    #[deku(id_pat = "16")] TwoHundredAndFiftySixTbps,
    #[deku(id_pat = "17")] OnePbps,
    #[deku(id_pat = "18")] FourPbps,
    #[deku(id_pat = "19")] SixteenPbps,
    #[deku(id_pat = "20")] SixtyFourPbps,
    #[deku(id_pat = "21")] TwoHundredAndFiftySixPbps,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum ProtConfigProt {
    #[deku(id_pat = "0")] PPPWithIPPDP,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum TFAggregateOpcode {
    #[deku(id_pat = "0")] IgnoreThisIE,
    #[deku(id_pat = "1")] CreateNewTFT,
    #[deku(id_pat = "2")] DeleteExistingTFT,
    #[deku(id_pat = "3")] AddPacketFiltersToExistingTFT,
    #[deku(id_pat = "4")] ReplacePacketFiltersInExistingTFT,
    #[deku(id_pat = "5")] DeletePacketFiltersFromExistingTFT,
    #[deku(id_pat = "6")] NoTFTOperation,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum TFAggregateE {
    #[deku(id_pat = "0")] NoParametersList,
    #[deku(id_pat = "1")] ParametersListIncluded,
    #[deku(id_pat = "_")] Other,
}

