
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ESMBearerResourceModifRequest {
    #[deku(pad_bits_before = "4")] pub linked_eps_bearer_id: Type1V<u8>,
    pub tf_aggregate: Type4LV<TFAggregate>,
    #[deku(ctx = "Tag(91)")] pub eps_qo_s: Type4TLV<EPSQoS>,
    #[deku(bytes = 1, ctx = "Tag(88)")] pub esm_cause: Type3TV<ESMCauseESMCause>,
    #[deku(ctx = "Tag(39)")] pub prot_config: Type4TLV<ProtConfig>,
    #[deku(ctx = "Tag(12)")] pub device_prop: Type1TV<DeviceProp>,
    #[deku(ctx = "Tag(51)")] pub nbifom_container: Type4TLV<()>,
    #[deku(ctx = "Tag(102), NeedsByteSize")] pub hdr_comp_config: Type4TLV<HdrCompConfig>,
    #[deku(ctx = "Tag(123)")] pub ext_prot_config: Type6TLVE<ProtConfig>,
    #[deku(ctx = "Tag(92)")] pub ext_eps_qo_s: Type4TLV<ExtEPSQoS>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct TFAggregate {
    pub opcode: TFAggregateOpcode,
    pub e: TFAggregateE,
    #[deku(bits = 4)] pub num_pkt_filters: u8,
    pub pkt_filters: (),
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct EPSQoS {
    #[deku(bytes = 1)] pub qci: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ProtConfig {
    #[deku(bits = 1)] pub ext: u8,
    #[deku(bits = 4)] pub spare: u8,
    pub prot: ProtConfigProt,
    pub config: (),
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct DeviceProp {
    #[deku(bits = 3)] pub spare: u8,
    #[deku(bits = 1)] pub low_priority: u8,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
#[deku(ctx = "ByteSize(byte_size): ByteSize")]
pub struct HdrCompConfig {
    #[deku(bits = 1)] pub spare: u8,
    #[deku(bits = 1)] pub p_0x0104: u8,
    #[deku(bits = 1)] pub p_0x0103: u8,
    #[deku(bits = 1)] pub p_0x0102: u8,
    #[deku(bits = 1)] pub p_0x0006: u8,
    #[deku(bits = 1)] pub p_0x0004: u8,
    #[deku(bits = 1)] pub p_0x0003: u8,
    #[deku(bits = 1)] pub p_0x0002: u8,
    #[deku(bytes = 2, endian = "big")] pub max_cid: u16,
    pub params_type: HdrCompConfigParamsType,
    #[deku(count = "byte_size - deku::byte_offset")] pub params_container: Vec<u8>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ExtEPSQoS {
    pub unit_max_bitrate: ExtEPSQoSUnitMaxBitrate,
    #[deku(bytes = 2, endian = "big")] pub max_ul_bitrate: u16,
    #[deku(bytes = 2, endian = "big")] pub max_dl_bitrate: u16,
    pub unit_guaranteed_bitrate: ExtEPSQoSUnitGuaranteedBitrate,
    #[deku(bytes = 2, endian = "big")] pub guaranteed_ul_bitrate: u16,
    #[deku(bytes = 2, endian = "big")] pub guaranteed_dl_bitrate: u16,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ESMCauseESMCause {
    #[deku(id_pat = "8")] OperatorDeterminedBarring,
    #[deku(id_pat = "26")] InsufficientResources,
    #[deku(id_pat = "27")] MissingOrUnknownAPN,
    #[deku(id_pat = "28")] UnknownPDNType,
    #[deku(id_pat = "29")] UserAuthenticationFailed,
    #[deku(id_pat = "30")] RequestRejectedByServingGWOrPDNGW,
    #[deku(id_pat = "31")] RequestRejectedUnspecified,
    #[deku(id_pat = "32")] ServiceOptionNotSupported,
    #[deku(id_pat = "33")] RequestedServiceOptionNotSubscribed,
    #[deku(id_pat = "34")] ServiceOptionTemporarilyOutOfOrder,
    #[deku(id_pat = "35")] PTIAlreadyInUse,
    #[deku(id_pat = "36")] RegularDeactivation,
    #[deku(id_pat = "37")] EPSQoSNotAccepted,
    #[deku(id_pat = "38")] NetworkFailure,
    #[deku(id_pat = "39")] ReactivationRequested,
    #[deku(id_pat = "41")] SemanticErrorInTheTFTOperation,
    #[deku(id_pat = "42")] SyntacticalErrorInTheTFTOperation,
    #[deku(id_pat = "43")] InvalidEPSBearerIdentity,
    #[deku(id_pat = "44")] SemanticErrorsInPacketFilterS,
    #[deku(id_pat = "45")] SyntacticalErrorsInPacketFilterS,
    #[deku(id_pat = "46")] UnusedSeeNOTE2,
    #[deku(id_pat = "47")] PTIMismatch,
    #[deku(id_pat = "49")] LastPDNDisconnectionNotAllowed,
    #[deku(id_pat = "50")] PDNTypeIPv4OnlyAllowed,
    #[deku(id_pat = "51")] PDNTypeIPv6OnlyAllowed,
    #[deku(id_pat = "52")] SingleAddressBearersOnlyAllowed,
    #[deku(id_pat = "53")] ESMInformationNotReceived,
    #[deku(id_pat = "54")] PDNConnectionDoesNotExist,
    #[deku(id_pat = "55")] MultiplePDNConnectionsForAGivenAPNNotAllowed,
    #[deku(id_pat = "56")] CollisionWithNetworkInitiatedRequest,
    #[deku(id_pat = "59")] UnsupportedQCIValue,
    #[deku(id_pat = "60")] BearerHandlingNotSupported,
    #[deku(id_pat = "65")] MaximumNumberOfEPSBearersReached,
    #[deku(id_pat = "66")] RequestedAPNNotSupportedInCurrentRATAndPLMNCombination,
    #[deku(id_pat = "81")] InvalidPTIValue,
    #[deku(id_pat = "95")] SemanticallyIncorrectMessage,
    #[deku(id_pat = "96")] InvalidMandatoryInformation,
    #[deku(id_pat = "97")] MessageTypeNonExistentOrNotImplemented,
    #[deku(id_pat = "98")] MessageTypeNotCompatibleWithTheProtocolState,
    #[deku(id_pat = "99")] InformationElementNonExistentOrNotImplemented,
    #[deku(id_pat = "100")] ConditionalIEError,
    #[deku(id_pat = "101")] MessageNotCompatibleWithTheProtocolState,
    #[deku(id_pat = "111")] ProtocolErrorUnspecified,
    #[deku(id_pat = "112")] APNRestrictionValueIncompatibleWithActiveEPSBearerContext,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ExtEPSQoSUnitMaxBitrate {
    #[deku(id_pat = "1")] TwoHundredKbps,
    #[deku(id_pat = "2")] OneMbps,
    #[deku(id_pat = "3")] FourMbps,
    #[deku(id_pat = "4")] SixteenMbps,
    #[deku(id_pat = "5")] SixtyFourMbps,
    #[deku(id_pat = "6")] TwoHundredAndFiftySixMbps,
    #[deku(id_pat = "7")] OneGbps,
    #[deku(id_pat = "8")] FourGbps,
    #[deku(id_pat = "9")] SixteenGbps,
    #[deku(id_pat = "10")] SixtyFourGbps,
    #[deku(id_pat = "11")] TwoHundredAndFiftySixGbps,
    #[deku(id_pat = "12")] OneTbps,
    #[deku(id_pat = "13")] FourTbps,
    #[deku(id_pat = "14")] SixteenTbps,
    #[deku(id_pat = "15")] SixtyFourTbps,
    #[deku(id_pat = "16")] TwoHundredAndFiftySixTbps,
    #[deku(id_pat = "17")] OnePbps,
    #[deku(id_pat = "18")] FourPbps,
    #[deku(id_pat = "19")] SixteenPbps,
    #[deku(id_pat = "20")] SixtyFourPbps,
    #[deku(id_pat = "21")] TwoHundredAndFiftySixPbps,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 8)]
pub enum ExtEPSQoSUnitGuaranteedBitrate {
    #[deku(id_pat = "1")] TwoHundredKbps,
    #[deku(id_pat = "2")] OneMbps,
    #[deku(id_pat = "3")] FourMbps,
    #[deku(id_pat = "4")] SixteenMbps,
    #[deku(id_pat = "5")] SixtyFourMbps,
    #[deku(id_pat = "6")] TwoHundredAndFiftySixMbps,
    #[deku(id_pat = "7")] OneGbps,
    #[deku(id_pat = "8")] FourGbps,
    #[deku(id_pat = "9")] SixteenGbps,
    #[deku(id_pat = "10")] SixtyFourGbps,
    #[deku(id_pat = "11")] TwoHundredAndFiftySixGbps,
    #[deku(id_pat = "12")] OneTbps,
    #[deku(id_pat = "13")] FourTbps,
    #[deku(id_pat = "14")] SixteenTbps,
    #[deku(id_pat = "15")] SixtyFourTbps,
    #[deku(id_pat = "16")] TwoHundredAndFiftySixTbps,
    #[deku(id_pat = "17")] OnePbps,
    #[deku(id_pat = "18")] FourPbps,
    #[deku(id_pat = "19")] SixteenPbps,
    #[deku(id_pat = "20")] SixtyFourPbps,
    #[deku(id_pat = "21")] TwoHundredAndFiftySixPbps,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 0)]
pub enum HdrCompConfigParamsType {
    #[deku(id_pat = "0")] ZeroNoCompression,
    #[deku(id_pat = "1")] TwoUDPIP,
    #[deku(id_pat = "2")] ThreeESPIP,
    #[deku(id_pat = "3")] FourIP,
    #[deku(id_pat = "4")] SixTCPIP,
    #[deku(id_pat = "5")] OneHundredAndTwoUDPIP,
    #[deku(id_pat = "6")] OneHundredAndThreeESPIP,
    #[deku(id_pat = "7")] OneHundredAndFourIP,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum ProtConfigProt {
    #[deku(id_pat = "0")] PPPWithIPPDP,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 3)]
pub enum TFAggregateOpcode {
    #[deku(id_pat = "0")] IgnoreThisIE,
    #[deku(id_pat = "1")] CreateNewTFT,
    #[deku(id_pat = "2")] DeleteExistingTFT,
    #[deku(id_pat = "3")] AddPacketFiltersToExistingTFT,
    #[deku(id_pat = "4")] ReplacePacketFiltersInExistingTFT,
    #[deku(id_pat = "5")] DeletePacketFiltersFromExistingTFT,
    #[deku(id_pat = "6")] NoTFTOperation,
    #[deku(id_pat = "7")] Reserved,
    #[deku(id_pat = "_")] Other,
}

#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 1)]
pub enum TFAggregateE {
    #[deku(id_pat = "0")] NoParametersList,
    #[deku(id_pat = "1")] ParametersListIncluded,
    #[deku(id_pat = "_")] Other,
}

