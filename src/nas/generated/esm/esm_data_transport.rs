
use deku::prelude::*;
use deku::ctx::ByteSize;
use serde::Serialize;
use crate::nas::layer3::*;

/// Autogenerated rust code, do not modify directly! Any changes should be
/// made via the python generator scripts.

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ESMDataTransport {
    #[deku(ctx = "NeedsByteSize")] pub user_data: Type6LVE<Layer3Buffer>,
    #[deku(ctx = "Tag(15)")] pub release_assist_ind: Type1TV<ReleaseAssistInd>,
}

#[derive(DekuRead, Debug, Serialize, Clone)]
pub struct ReleaseAssistInd {
    #[deku(bits = 2)] pub spare: u8,
    pub ddx: ReleaseAssistIndDDX,
}
#[derive(DekuRead, Debug, Serialize, Clone, PartialEq)]
#[deku(id_type = "u8", bits = 2)]
pub enum ReleaseAssistIndDDX {
    #[deku(id_pat = "0")] NoInformationAvailable,
    #[deku(id_pat = "1")] NoFurtherUplinkOrDownlinkDataTransmissionSubsequentToTheUplinkDataTransmissionIsExpected,
    #[deku(id_pat = "2")] OnlyASingleDownlinkDataTransmissionAndNoFurtherUplinkDataTransmissionSubsequentToTheUplinkDataTransmissionIsExpected,
    #[deku(id_pat = "3")] Reserved,
    #[deku(id_pat = "_")] Other,
}

